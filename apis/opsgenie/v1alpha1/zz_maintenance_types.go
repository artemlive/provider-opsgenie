// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntityInitParameters struct {

	// The id of the entity that maintenance will be applied.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/email/v1alpha1.EmailIntegration
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a EmailIntegration in email to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a EmailIntegration in email to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// This parameter defines when the maintenance will be active. It can take one of for-5-minutes, for-30-minutes, for-1-hour, indefinitely or schedule.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EntityObservation struct {

	// The id of the entity that maintenance will be applied.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This parameter defines when the maintenance will be active. It can take one of for-5-minutes, for-30-minutes, for-1-hour, indefinitely or schedule.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EntityParameters struct {

	// The id of the entity that maintenance will be applied.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/email/v1alpha1.EmailIntegration
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a EmailIntegration in email to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a EmailIntegration in email to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// This parameter defines when the maintenance will be active. It can take one of for-5-minutes, for-30-minutes, for-1-hour, indefinitely or schedule.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MaintenanceInitParameters struct {

	// Description for the maintenance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules []MaintenanceRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Time []TimeInitParameters `json:"time,omitempty" tf:"time,omitempty"`
}

type MaintenanceObservation struct {

	// Description for the maintenance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The id of the entity that maintenance will be applied.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules []MaintenanceRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Time []TimeObservation `json:"time,omitempty" tf:"time,omitempty"`
}

type MaintenanceParameters struct {

	// Description for the maintenance.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	// +kubebuilder:validation:Optional
	Rules []MaintenanceRulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	// +kubebuilder:validation:Optional
	Time []TimeParameters `json:"time,omitempty" tf:"time,omitempty"`
}

type MaintenanceRulesInitParameters struct {

	// This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
	Entity []EntityInitParameters `json:"entity,omitempty" tf:"entity,omitempty"`

	// State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type MaintenanceRulesObservation struct {

	// This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
	Entity []EntityObservation `json:"entity,omitempty" tf:"entity,omitempty"`

	// State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type MaintenanceRulesParameters struct {

	// This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
	// +kubebuilder:validation:Optional
	Entity []EntityParameters `json:"entity" tf:"entity,omitempty"`

	// State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type TimeInitParameters struct {

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// This parameter defines when the maintenance will be active. It can take one of for-5-minutes, for-30-minutes, for-1-hour, indefinitely or schedule.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TimeObservation struct {

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// This parameter defines when the maintenance will be active. It can take one of for-5-minutes, for-30-minutes, for-1-hour, indefinitely or schedule.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TimeParameters struct {

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	// +kubebuilder:validation:Optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// This parameter defines when the maintenance will be active. It can take one of for-5-minutes, for-30-minutes, for-1-hour, indefinitely or schedule.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// MaintenanceSpec defines the desired state of Maintenance
type MaintenanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MaintenanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MaintenanceInitParameters `json:"initProvider,omitempty"`
}

// MaintenanceStatus defines the observed state of Maintenance.
type MaintenanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MaintenanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Maintenance is the Schema for the Maintenances API. Manages a Maintenance within Opsgenie.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type Maintenance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   MaintenanceSpec   `json:"spec"`
	Status MaintenanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceList contains a list of Maintenances
type MaintenanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Maintenance `json:"items"`
}

// Repository type metadata.
var (
	Maintenance_Kind             = "Maintenance"
	Maintenance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Maintenance_Kind}.String()
	Maintenance_KindAPIVersion   = Maintenance_Kind + "." + CRDGroupVersion.String()
	Maintenance_GroupVersionKind = CRDGroupVersion.WithKind(Maintenance_Kind)
)

func init() {
	SchemeBuilder.Register(&Maintenance{}, &MaintenanceList{})
}
