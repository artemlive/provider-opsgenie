// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EscalationInitParameters struct {

	// Description of the escalation.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the escalation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Owner team id of the escalation.
	OwnerTeamID *string `json:"ownerTeamId,omitempty" tf:"owner_team_id,omitempty"`

	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeat []RepeatInitParameters `json:"repeat,omitempty" tf:"repeat,omitempty"`

	// List of the escalation rules. See below for how rules are defined.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type EscalationObservation struct {

	// Description of the escalation.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the Opsgenie Escalation.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the escalation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Owner team id of the escalation.
	OwnerTeamID *string `json:"ownerTeamId,omitempty" tf:"owner_team_id,omitempty"`

	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeat []RepeatObservation `json:"repeat,omitempty" tf:"repeat,omitempty"`

	// List of the escalation rules. See below for how rules are defined.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type EscalationParameters struct {

	// Description of the escalation.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the escalation.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Owner team id of the escalation.
	// +kubebuilder:validation:Optional
	OwnerTeamID *string `json:"ownerTeamId,omitempty" tf:"owner_team_id,omitempty"`

	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	// +kubebuilder:validation:Optional
	Repeat []RepeatParameters `json:"repeat,omitempty" tf:"repeat,omitempty"`

	// List of the escalation rules. See below for how rules are defined.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type RecipientInitParameters struct {

	// The ID of the Opsgenie Escalation.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/team/v1alpha1.Schedule
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Schedule in team to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Schedule in team to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RecipientObservation struct {

	// The ID of the Opsgenie Escalation.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RecipientParameters struct {

	// The ID of the Opsgenie Escalation.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/team/v1alpha1.Schedule
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Schedule in team to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Schedule in team to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RepeatInitParameters struct {

	// : all members of the team
	CloseAlertAfterAll *bool `json:"closeAlertAfterAll,omitempty" tf:"close_alert_after_all,omitempty"`

	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	ResetRecipientStates *bool `json:"resetRecipientStates,omitempty" tf:"reset_recipient_states,omitempty"`

	WaitInterval *float64 `json:"waitInterval,omitempty" tf:"wait_interval,omitempty"`
}

type RepeatObservation struct {

	// : all members of the team
	CloseAlertAfterAll *bool `json:"closeAlertAfterAll,omitempty" tf:"close_alert_after_all,omitempty"`

	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	ResetRecipientStates *bool `json:"resetRecipientStates,omitempty" tf:"reset_recipient_states,omitempty"`

	WaitInterval *float64 `json:"waitInterval,omitempty" tf:"wait_interval,omitempty"`
}

type RepeatParameters struct {

	// : all members of the team
	// +kubebuilder:validation:Optional
	CloseAlertAfterAll *bool `json:"closeAlertAfterAll,omitempty" tf:"close_alert_after_all,omitempty"`

	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// +kubebuilder:validation:Optional
	ResetRecipientStates *bool `json:"resetRecipientStates,omitempty" tf:"reset_recipient_states,omitempty"`

	// +kubebuilder:validation:Optional
	WaitInterval *float64 `json:"waitInterval,omitempty" tf:"wait_interval,omitempty"`
}

type RulesInitParameters struct {

	// The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: if-not-acked and if-not-closed. Default: if-not-acked
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Time delay of the escalation rule, in minutes.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Recipient calculation logic for schedules. Possible values are:
	NotifyType *string `json:"notifyType,omitempty" tf:"notify_type,omitempty"`

	// Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: user, schedule, team. There can only be one recipient per each rules.
	Recipient []RecipientInitParameters `json:"recipient,omitempty" tf:"recipient,omitempty"`
}

type RulesObservation struct {

	// The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: if-not-acked and if-not-closed. Default: if-not-acked
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Time delay of the escalation rule, in minutes.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Recipient calculation logic for schedules. Possible values are:
	NotifyType *string `json:"notifyType,omitempty" tf:"notify_type,omitempty"`

	// Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: user, schedule, team. There can only be one recipient per each rules.
	Recipient []RecipientObservation `json:"recipient,omitempty" tf:"recipient,omitempty"`
}

type RulesParameters struct {

	// The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: if-not-acked and if-not-closed. Default: if-not-acked
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// Time delay of the escalation rule, in minutes.
	// +kubebuilder:validation:Optional
	Delay *float64 `json:"delay" tf:"delay,omitempty"`

	// Recipient calculation logic for schedules. Possible values are:
	// +kubebuilder:validation:Optional
	NotifyType *string `json:"notifyType" tf:"notify_type,omitempty"`

	// Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: user, schedule, team. There can only be one recipient per each rules.
	// +kubebuilder:validation:Optional
	Recipient []RecipientParameters `json:"recipient" tf:"recipient,omitempty"`
}

// EscalationSpec defines the desired state of Escalation
type EscalationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EscalationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EscalationInitParameters `json:"initProvider,omitempty"`
}

// EscalationStatus defines the observed state of Escalation.
type EscalationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EscalationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Escalation is the Schema for the Escalations API. Manages an Escalation within Opsgenie.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type Escalation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   EscalationSpec   `json:"spec"`
	Status EscalationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EscalationList contains a list of Escalations
type EscalationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Escalation `json:"items"`
}

// Repository type metadata.
var (
	Escalation_Kind             = "Escalation"
	Escalation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Escalation_Kind}.String()
	Escalation_KindAPIVersion   = Escalation_Kind + "." + CRDGroupVersion.String()
	Escalation_GroupVersionKind = CRDGroupVersion.WithKind(Escalation_Kind)
)

func init() {
	SchemeBuilder.Register(&Escalation{}, &EscalationList{})
}
