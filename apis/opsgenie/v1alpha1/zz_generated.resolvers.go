// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha11 "github.com/macpaw/provider-opsgenie/apis/email/v1alpha1"
	v1alpha1 "github.com/macpaw/provider-opsgenie/apis/team/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Escalation.
func (mg *Escalation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rules[i3].Recipient); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rules[i3].Recipient[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Rules[i3].Recipient[i4].IDRef,
				Selector:     mg.Spec.ForProvider.Rules[i3].Recipient[i4].IDSelector,
				To: reference.To{
					List:    &v1alpha1.ScheduleList{},
					Managed: &v1alpha1.Schedule{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Rules[i3].Recipient[i4].ID")
			}
			mg.Spec.ForProvider.Rules[i3].Recipient[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Rules[i3].Recipient[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Rules[i3].Recipient); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Rules[i3].Recipient[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Rules[i3].Recipient[i4].IDRef,
				Selector:     mg.Spec.InitProvider.Rules[i3].Recipient[i4].IDSelector,
				To: reference.To{
					List:    &v1alpha1.ScheduleList{},
					Managed: &v1alpha1.Schedule{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Rules[i3].Recipient[i4].ID")
			}
			mg.Spec.InitProvider.Rules[i3].Recipient[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Rules[i3].Recipient[i4].IDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Heartbeat.
func (mg *Heartbeat) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OwnerTeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OwnerTeamIDRef,
		Selector:     mg.Spec.ForProvider.OwnerTeamIDSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OwnerTeamID")
	}
	mg.Spec.ForProvider.OwnerTeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OwnerTeamIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OwnerTeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OwnerTeamIDRef,
		Selector:     mg.Spec.InitProvider.OwnerTeamIDSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OwnerTeamID")
	}
	mg.Spec.InitProvider.OwnerTeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OwnerTeamIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Maintenance.
func (mg *Maintenance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rules[i3].Entity); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rules[i3].Entity[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Rules[i3].Entity[i4].IDRef,
				Selector:     mg.Spec.ForProvider.Rules[i3].Entity[i4].IDSelector,
				To: reference.To{
					List:    &v1alpha11.EmailIntegrationList{},
					Managed: &v1alpha11.EmailIntegration{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Rules[i3].Entity[i4].ID")
			}
			mg.Spec.ForProvider.Rules[i3].Entity[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Rules[i3].Entity[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Rules[i3].Entity); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Rules[i3].Entity[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Rules[i3].Entity[i4].IDRef,
				Selector:     mg.Spec.InitProvider.Rules[i3].Entity[i4].IDSelector,
				To: reference.To{
					List:    &v1alpha11.EmailIntegrationList{},
					Managed: &v1alpha11.EmailIntegration{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Rules[i3].Entity[i4].ID")
			}
			mg.Spec.InitProvider.Rules[i3].Entity[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Rules[i3].Entity[i4].IDRef = rsp.ResolvedReference

		}
	}

	return nil
}
