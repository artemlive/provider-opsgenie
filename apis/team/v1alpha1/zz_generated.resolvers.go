// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/macpaw/provider-opsgenie/apis/user/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Schedule.
func (mg *Schedule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OwnerTeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OwnerTeamIDRef,
		Selector:     mg.Spec.ForProvider.OwnerTeamIDSelector,
		To: reference.To{
			List:    &TeamList{},
			Managed: &Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OwnerTeamID")
	}
	mg.Spec.ForProvider.OwnerTeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OwnerTeamIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OwnerTeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OwnerTeamIDRef,
		Selector:     mg.Spec.InitProvider.OwnerTeamIDSelector,
		To: reference.To{
			List:    &TeamList{},
			Managed: &Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OwnerTeamID")
	}
	mg.Spec.InitProvider.OwnerTeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OwnerTeamIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ScheduleRotation.
func (mg *ScheduleRotation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Participant); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Participant[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Participant[i3].IDRef,
			Selector:     mg.Spec.ForProvider.Participant[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Participant[i3].ID")
		}
		mg.Spec.ForProvider.Participant[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Participant[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ScheduleID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ScheduleIDRef,
		Selector:     mg.Spec.ForProvider.ScheduleIDSelector,
		To: reference.To{
			List:    &ScheduleList{},
			Managed: &Schedule{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ScheduleID")
	}
	mg.Spec.ForProvider.ScheduleID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ScheduleIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Participant); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Participant[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Participant[i3].IDRef,
			Selector:     mg.Spec.InitProvider.Participant[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Participant[i3].ID")
		}
		mg.Spec.InitProvider.Participant[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Participant[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ScheduleID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ScheduleIDRef,
		Selector:     mg.Spec.InitProvider.ScheduleIDSelector,
		To: reference.To{
			List:    &ScheduleList{},
			Managed: &Schedule{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ScheduleID")
	}
	mg.Spec.InitProvider.ScheduleID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ScheduleIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Team.
func (mg *Team) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Member); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Member[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Member[i3].IDRef,
			Selector:     mg.Spec.ForProvider.Member[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Member[i3].ID")
		}
		mg.Spec.ForProvider.Member[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Member[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Member); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Member[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Member[i3].IDRef,
			Selector:     mg.Spec.InitProvider.Member[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Member[i3].ID")
		}
		mg.Spec.InitProvider.Member[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Member[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this TeamRoutingRule.
func (mg *TeamRoutingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Notify); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Notify[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Notify[i3].NameRef,
			Selector:     mg.Spec.ForProvider.Notify[i3].NameSelector,
			To: reference.To{
				List:    &ScheduleList{},
				Managed: &Schedule{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Notify[i3].Name")
		}
		mg.Spec.ForProvider.Notify[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Notify[i3].NameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TeamIDRef,
		Selector:     mg.Spec.ForProvider.TeamIDSelector,
		To: reference.To{
			List:    &TeamList{},
			Managed: &Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TeamID")
	}
	mg.Spec.ForProvider.TeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TeamIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Notify); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Notify[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Notify[i3].NameRef,
			Selector:     mg.Spec.InitProvider.Notify[i3].NameSelector,
			To: reference.To{
				List:    &ScheduleList{},
				Managed: &Schedule{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Notify[i3].Name")
		}
		mg.Spec.InitProvider.Notify[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Notify[i3].NameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TeamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TeamIDRef,
		Selector:     mg.Spec.InitProvider.TeamIDSelector,
		To: reference.To{
			List:    &TeamList{},
			Managed: &Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TeamID")
	}
	mg.Spec.InitProvider.TeamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TeamIDRef = rsp.ResolvedReference

	return nil
}
