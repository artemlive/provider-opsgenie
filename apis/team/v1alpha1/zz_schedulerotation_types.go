// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParticipantInitParameters struct {

	// The id of the responder.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/user/v1alpha1.User
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a User in user to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a User in user to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ParticipantObservation struct {

	// The id of the responder.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ParticipantParameters struct {

	// The id of the responder.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/user/v1alpha1.User
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a User in user to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a User in user to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// Type of rotation. May be one of daily, weekly and hourly.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RestrictionInitParameters struct {

	// Value of the hour that frame will end.
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	EndMin *float64 `json:"endMin,omitempty" tf:"end_min,omitempty"`

	// Value of the hour that frame will start.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin *float64 `json:"startMin,omitempty" tf:"start_min,omitempty"`
}

type RestrictionObservation struct {

	// Value of the hour that frame will end.
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	EndMin *float64 `json:"endMin,omitempty" tf:"end_min,omitempty"`

	// Value of the hour that frame will start.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin *float64 `json:"startMin,omitempty" tf:"start_min,omitempty"`
}

type RestrictionParameters struct {

	// Value of the hour that frame will end.
	// +kubebuilder:validation:Optional
	EndHour *float64 `json:"endHour" tf:"end_hour,omitempty"`

	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	// +kubebuilder:validation:Optional
	EndMin *float64 `json:"endMin" tf:"end_min,omitempty"`

	// Value of the hour that frame will start.
	// +kubebuilder:validation:Optional
	StartHour *float64 `json:"startHour" tf:"start_hour,omitempty"`

	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	// +kubebuilder:validation:Optional
	StartMin *float64 `json:"startMin" tf:"start_min,omitempty"`
}

type RestrictionsInitParameters struct {

	// Value of the day that frame will end.
	EndDay *string `json:"endDay,omitempty" tf:"end_day,omitempty"`

	// Value of the hour that frame will end.
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	EndMin *float64 `json:"endMin,omitempty" tf:"end_min,omitempty"`

	// Value of the day that frame will start.
	StartDay *string `json:"startDay,omitempty" tf:"start_day,omitempty"`

	// Value of the hour that frame will start.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin *float64 `json:"startMin,omitempty" tf:"start_min,omitempty"`
}

type RestrictionsObservation struct {

	// Value of the day that frame will end.
	EndDay *string `json:"endDay,omitempty" tf:"end_day,omitempty"`

	// Value of the hour that frame will end.
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	EndMin *float64 `json:"endMin,omitempty" tf:"end_min,omitempty"`

	// Value of the day that frame will start.
	StartDay *string `json:"startDay,omitempty" tf:"start_day,omitempty"`

	// Value of the hour that frame will start.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin *float64 `json:"startMin,omitempty" tf:"start_min,omitempty"`
}

type RestrictionsParameters struct {

	// Value of the day that frame will end.
	// +kubebuilder:validation:Optional
	EndDay *string `json:"endDay" tf:"end_day,omitempty"`

	// Value of the hour that frame will end.
	// +kubebuilder:validation:Optional
	EndHour *float64 `json:"endHour" tf:"end_hour,omitempty"`

	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	// +kubebuilder:validation:Optional
	EndMin *float64 `json:"endMin" tf:"end_min,omitempty"`

	// Value of the day that frame will start.
	// +kubebuilder:validation:Optional
	StartDay *string `json:"startDay" tf:"start_day,omitempty"`

	// Value of the hour that frame will start.
	// +kubebuilder:validation:Optional
	StartHour *float64 `json:"startHour" tf:"start_hour,omitempty"`

	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	// +kubebuilder:validation:Optional
	StartMin *float64 `json:"startMin" tf:"start_min,omitempty"`
}

type ScheduleRotationInitParameters struct {

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// Length of the rotation with default value 1.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participant []ParticipantInitParameters `json:"participant,omitempty" tf:"participant,omitempty"`

	// Identifier of the schedule.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/team/v1alpha1.Schedule
	ScheduleID *string `json:"scheduleId,omitempty" tf:"schedule_id,omitempty"`

	// Reference to a Schedule in team to populate scheduleId.
	// +kubebuilder:validation:Optional
	ScheduleIDRef *v1.Reference `json:"scheduleIdRef,omitempty" tf:"-"`

	// Selector for a Schedule in team to populate scheduleId.
	// +kubebuilder:validation:Optional
	ScheduleIDSelector *v1.Selector `json:"scheduleIdSelector,omitempty" tf:"-"`

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	TimeRestriction []TimeRestrictionInitParameters `json:"timeRestriction,omitempty" tf:"time_restriction,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScheduleRotationObservation struct {

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// The id of the responder.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Length of the rotation with default value 1.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participant []ParticipantObservation `json:"participant,omitempty" tf:"participant,omitempty"`

	// Identifier of the schedule.
	ScheduleID *string `json:"scheduleId,omitempty" tf:"schedule_id,omitempty"`

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	TimeRestriction []TimeRestrictionObservation `json:"timeRestriction,omitempty" tf:"time_restriction,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScheduleRotationParameters struct {

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// Length of the rotation with default value 1.
	// +kubebuilder:validation:Optional
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	// +kubebuilder:validation:Optional
	Participant []ParticipantParameters `json:"participant,omitempty" tf:"participant,omitempty"`

	// Identifier of the schedule.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/team/v1alpha1.Schedule
	// +kubebuilder:validation:Optional
	ScheduleID *string `json:"scheduleId,omitempty" tf:"schedule_id,omitempty"`

	// Reference to a Schedule in team to populate scheduleId.
	// +kubebuilder:validation:Optional
	ScheduleIDRef *v1.Reference `json:"scheduleIdRef,omitempty" tf:"-"`

	// Selector for a Schedule in team to populate scheduleId.
	// +kubebuilder:validation:Optional
	ScheduleIDSelector *v1.Selector `json:"scheduleIdSelector,omitempty" tf:"-"`

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	// +kubebuilder:validation:Optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// +kubebuilder:validation:Optional
	TimeRestriction []TimeRestrictionParameters `json:"timeRestriction,omitempty" tf:"time_restriction,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TimeRestrictionInitParameters struct {

	// It is a restriction object which is described below. In this case startDay/endDay fields are not supported. This can be used only if time restriction type is time-of-day.
	Restriction []RestrictionInitParameters `json:"restriction,omitempty" tf:"restriction,omitempty"`

	// It is a restriction object which is described below. This can be used only if time restriction type is weekday-and-time-of-day.
	Restrictions []RestrictionsInitParameters `json:"restrictions,omitempty" tf:"restrictions,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TimeRestrictionObservation struct {

	// It is a restriction object which is described below. In this case startDay/endDay fields are not supported. This can be used only if time restriction type is time-of-day.
	Restriction []RestrictionObservation `json:"restriction,omitempty" tf:"restriction,omitempty"`

	// It is a restriction object which is described below. This can be used only if time restriction type is weekday-and-time-of-day.
	Restrictions []RestrictionsObservation `json:"restrictions,omitempty" tf:"restrictions,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TimeRestrictionParameters struct {

	// It is a restriction object which is described below. In this case startDay/endDay fields are not supported. This can be used only if time restriction type is time-of-day.
	// +kubebuilder:validation:Optional
	Restriction []RestrictionParameters `json:"restriction,omitempty" tf:"restriction,omitempty"`

	// It is a restriction object which is described below. This can be used only if time restriction type is weekday-and-time-of-day.
	// +kubebuilder:validation:Optional
	Restrictions []RestrictionsParameters `json:"restrictions,omitempty" tf:"restrictions,omitempty"`

	// Type of rotation. May be one of daily, weekly and hourly.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ScheduleRotationSpec defines the desired state of ScheduleRotation
type ScheduleRotationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScheduleRotationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScheduleRotationInitParameters `json:"initProvider,omitempty"`
}

// ScheduleRotationStatus defines the observed state of ScheduleRotation.
type ScheduleRotationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScheduleRotationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScheduleRotation is the Schema for the ScheduleRotations API. Manages a Schedule Rotation within Opsgenie.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type ScheduleRotation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.participant) || (has(self.initProvider) && has(self.initProvider.participant))",message="spec.forProvider.participant is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startDate) || (has(self.initProvider) && has(self.initProvider.startDate))",message="spec.forProvider.startDate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   ScheduleRotationSpec   `json:"spec"`
	Status ScheduleRotationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScheduleRotationList contains a list of ScheduleRotations
type ScheduleRotationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScheduleRotation `json:"items"`
}

// Repository type metadata.
var (
	ScheduleRotation_Kind             = "ScheduleRotation"
	ScheduleRotation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScheduleRotation_Kind}.String()
	ScheduleRotation_KindAPIVersion   = ScheduleRotation_Kind + "." + CRDGroupVersion.String()
	ScheduleRotation_GroupVersionKind = CRDGroupVersion.WithKind(ScheduleRotation_Kind)
)

func init() {
	SchemeBuilder.Register(&ScheduleRotation{}, &ScheduleRotationList{})
}
