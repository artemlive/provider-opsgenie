// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserContactInitParameters struct {

	// Enable contact of the user in OpsGenie. Default value is true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// This parameter is the contact method of user and should be one of email, sms or voice. Please note that adding mobile is not supported from API.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// to field is the address of given method.
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type UserContactObservation struct {

	// Enable contact of the user in OpsGenie. Default value is true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the Opsgenie Contact.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This parameter is the contact method of user and should be one of email, sms or voice. Please note that adding mobile is not supported from API.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// to field is the address of given method.
	To *string `json:"to,omitempty" tf:"to,omitempty"`

	// The username for contact.(reference)
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserContactParameters struct {

	// Enable contact of the user in OpsGenie. Default value is true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// This parameter is the contact method of user and should be one of email, sms or voice. Please note that adding mobile is not supported from API.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// to field is the address of given method.
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`

	// The username for contact.(reference)
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/user/v1alpha1.User
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Reference to a User in user to populate username.
	// +kubebuilder:validation:Optional
	UsernameRef *v1.Reference `json:"usernameRef,omitempty" tf:"-"`

	// Selector for a User in user to populate username.
	// +kubebuilder:validation:Optional
	UsernameSelector *v1.Selector `json:"usernameSelector,omitempty" tf:"-"`
}

// UserContactSpec defines the desired state of UserContact
type UserContactSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserContactParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserContactInitParameters `json:"initProvider,omitempty"`
}

// UserContactStatus defines the observed state of UserContact.
type UserContactStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserContactObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserContact is the Schema for the UserContacts API. Manages a User Contact.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type UserContact struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.method) || (has(self.initProvider) && has(self.initProvider.method))",message="spec.forProvider.method is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.to) || (has(self.initProvider) && has(self.initProvider.to))",message="spec.forProvider.to is a required parameter"
	Spec   UserContactSpec   `json:"spec"`
	Status UserContactStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserContactList contains a list of UserContacts
type UserContactList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserContact `json:"items"`
}

// Repository type metadata.
var (
	UserContact_Kind             = "UserContact"
	UserContact_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserContact_Kind}.String()
	UserContact_KindAPIVersion   = UserContact_Kind + "." + CRDGroupVersion.String()
	UserContact_GroupVersionKind = CRDGroupVersion.WithKind(UserContact_Kind)
)

func init() {
	SchemeBuilder.Register(&UserContact{}, &UserContactList{})
}
