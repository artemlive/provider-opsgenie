// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomRoleInitParameters struct {

	// The rights this role cannot have. For allowed values please refer User Right Prerequisites
	// +listType=set
	DisallowedRights []*string `json:"disallowedRights,omitempty" tf:"disallowed_rights,omitempty"`

	// The role from which this role has been derived. Allowed Values: "user", "observer", "stakeholder".
	ExtendedRole *string `json:"extendedRole,omitempty" tf:"extended_role,omitempty"`

	// The rights granted to this role. For allowed values please refer User Right Prerequisites
	// +listType=set
	GrantedRights []*string `json:"grantedRights,omitempty" tf:"granted_rights,omitempty"`

	// Name of the custom role.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type CustomRoleObservation struct {

	// The rights this role cannot have. For allowed values please refer User Right Prerequisites
	// +listType=set
	DisallowedRights []*string `json:"disallowedRights,omitempty" tf:"disallowed_rights,omitempty"`

	// The role from which this role has been derived. Allowed Values: "user", "observer", "stakeholder".
	ExtendedRole *string `json:"extendedRole,omitempty" tf:"extended_role,omitempty"`

	// The rights granted to this role. For allowed values please refer User Right Prerequisites
	// +listType=set
	GrantedRights []*string `json:"grantedRights,omitempty" tf:"granted_rights,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the custom role.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type CustomRoleParameters struct {

	// The rights this role cannot have. For allowed values please refer User Right Prerequisites
	// +kubebuilder:validation:Optional
	// +listType=set
	DisallowedRights []*string `json:"disallowedRights,omitempty" tf:"disallowed_rights,omitempty"`

	// The role from which this role has been derived. Allowed Values: "user", "observer", "stakeholder".
	// +kubebuilder:validation:Optional
	ExtendedRole *string `json:"extendedRole,omitempty" tf:"extended_role,omitempty"`

	// The rights granted to this role. For allowed values please refer User Right Prerequisites
	// +kubebuilder:validation:Optional
	// +listType=set
	GrantedRights []*string `json:"grantedRights,omitempty" tf:"granted_rights,omitempty"`

	// Name of the custom role.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

// CustomRoleSpec defines the desired state of CustomRole
type CustomRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomRoleInitParameters `json:"initProvider,omitempty"`
}

// CustomRoleStatus defines the observed state of CustomRole.
type CustomRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomRole is the Schema for the CustomRoles API. Manages custom user roles within Opsgenie.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type CustomRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleName) || (has(self.initProvider) && has(self.initProvider.roleName))",message="spec.forProvider.roleName is a required parameter"
	Spec   CustomRoleSpec   `json:"spec"`
	Status CustomRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomRoleList contains a list of CustomRoles
type CustomRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomRole `json:"items"`
}

// Repository type metadata.
var (
	CustomRole_Kind             = "CustomRole"
	CustomRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomRole_Kind}.String()
	CustomRole_KindAPIVersion   = CustomRole_Kind + "." + CRDGroupVersion.String()
	CustomRole_GroupVersionKind = CRDGroupVersion.WithKind(CustomRole_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomRole{}, &CustomRoleList{})
}
