// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AcknowledgeInitParameters struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AcknowledgeObservation struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AcknowledgeParameters struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Additional alert action note.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AddNoteFilterInitParameters struct {
	Conditions []FilterConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AddNoteFilterObservation struct {
	Conditions []FilterConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AddNoteFilterParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []FilterConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type AddNoteInitParameters struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []AddNoteFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AddNoteObservation struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []AddNoteFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AddNoteParameters struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// +kubebuilder:validation:Optional
	Filter []AddNoteFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Additional alert action note.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type CloseFilterConditionsInitParameters struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CloseFilterConditionsObservation struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CloseFilterConditionsParameters struct {

	// +kubebuilder:validation:Optional
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CloseFilterInitParameters struct {
	Conditions []CloseFilterConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CloseFilterObservation struct {
	Conditions []CloseFilterConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CloseFilterParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []CloseFilterConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type CloseInitParameters struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []CloseFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type CloseObservation struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []CloseFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type CloseParameters struct {

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// +kubebuilder:validation:Optional
	Filter []CloseFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Additional alert action note.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConditionsInitParameters struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type ConditionsObservation struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type ConditionsParameters struct {

	// +kubebuilder:validation:Optional
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CreateFilterConditionsInitParameters struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CreateFilterConditionsObservation struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CreateFilterConditionsParameters struct {

	// +kubebuilder:validation:Optional
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type CreateFilterInitParameters struct {
	Conditions []CreateFilterConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CreateFilterObservation struct {
	Conditions []CreateFilterConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CreateFilterParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []CreateFilterConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type CreateInitParameters struct {

	// , alias, entity, Message, recipients, responders, Subject, tags, teams, eventType, Timestamp, TopicArn.
	AlertActions []*string `json:"alertActions,omitempty" tf:"alert_actions,omitempty"`

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	AppendAttachments *bool `json:"appendAttachments,omitempty" tf:"append_attachments,omitempty"`

	// Custom alert priority. e.g. {{message.substring(0,2)}}
	CustomPriority *string `json:"customPriority,omitempty" tf:"custom_priority,omitempty"`

	// Detailed description of the alert, anything that may not have fit in the message field.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The entity the alert is related to.
	Entity *string `json:"entity,omitempty" tf:"entity,omitempty"`

	// Set of user defined properties specified as a map.
	// +mapType=granular
	ExtraProperties map[string]*string `json:"extraProperties,omitempty" tf:"extra_properties,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []CreateFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	IgnoreAlertActionsFromPayload *bool `json:"ignoreAlertActionsFromPayload,omitempty" tf:"ignore_alert_actions_from_payload,omitempty"`

	IgnoreExtraPropertiesFromPayload *bool `json:"ignoreExtraPropertiesFromPayload,omitempty" tf:"ignore_extra_properties_from_payload,omitempty"`

	// If enabled, the integration will ignore responders sent in request payloads.
	IgnoreRespondersFromPayload *bool `json:"ignoreRespondersFromPayload,omitempty" tf:"ignore_responders_from_payload,omitempty"`

	IgnoreTagsFromPayload *bool `json:"ignoreTagsFromPayload,omitempty" tf:"ignore_tags_from_payload,omitempty"`

	// If enabled, the integration will ignore teams sent in request payloads.
	IgnoreTeamsFromPayload *bool `json:"ignoreTeamsFromPayload,omitempty" tf:"ignore_teams_from_payload,omitempty"`

	// properties, recipients, teams, priority, eventType.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// Alert priority.
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
	Responders []RespondersInitParameters `json:"responders,omitempty" tf:"responders,omitempty"`

	// User defined field to specify source of action.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Comma separated list of labels to be attached to the alert.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type CreateObservation struct {

	// , alias, entity, Message, recipients, responders, Subject, tags, teams, eventType, Timestamp, TopicArn.
	AlertActions []*string `json:"alertActions,omitempty" tf:"alert_actions,omitempty"`

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	AppendAttachments *bool `json:"appendAttachments,omitempty" tf:"append_attachments,omitempty"`

	// Custom alert priority. e.g. {{message.substring(0,2)}}
	CustomPriority *string `json:"customPriority,omitempty" tf:"custom_priority,omitempty"`

	// Detailed description of the alert, anything that may not have fit in the message field.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The entity the alert is related to.
	Entity *string `json:"entity,omitempty" tf:"entity,omitempty"`

	// Set of user defined properties specified as a map.
	// +mapType=granular
	ExtraProperties map[string]*string `json:"extraProperties,omitempty" tf:"extra_properties,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []CreateFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	IgnoreAlertActionsFromPayload *bool `json:"ignoreAlertActionsFromPayload,omitempty" tf:"ignore_alert_actions_from_payload,omitempty"`

	IgnoreExtraPropertiesFromPayload *bool `json:"ignoreExtraPropertiesFromPayload,omitempty" tf:"ignore_extra_properties_from_payload,omitempty"`

	// If enabled, the integration will ignore responders sent in request payloads.
	IgnoreRespondersFromPayload *bool `json:"ignoreRespondersFromPayload,omitempty" tf:"ignore_responders_from_payload,omitempty"`

	IgnoreTagsFromPayload *bool `json:"ignoreTagsFromPayload,omitempty" tf:"ignore_tags_from_payload,omitempty"`

	// If enabled, the integration will ignore teams sent in request payloads.
	IgnoreTeamsFromPayload *bool `json:"ignoreTeamsFromPayload,omitempty" tf:"ignore_teams_from_payload,omitempty"`

	// properties, recipients, teams, priority, eventType.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Additional alert action note.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// Alert priority.
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
	Responders []RespondersObservation `json:"responders,omitempty" tf:"responders,omitempty"`

	// User defined field to specify source of action.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Comma separated list of labels to be attached to the alert.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type CreateParameters struct {

	// , alias, entity, Message, recipients, responders, Subject, tags, teams, eventType, Timestamp, TopicArn.
	// +kubebuilder:validation:Optional
	AlertActions []*string `json:"alertActions,omitempty" tf:"alert_actions,omitempty"`

	// An identifier that is used for alert deduplication. Default: {{alias}}.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// +kubebuilder:validation:Optional
	AppendAttachments *bool `json:"appendAttachments,omitempty" tf:"append_attachments,omitempty"`

	// Custom alert priority. e.g. {{message.substring(0,2)}}
	// +kubebuilder:validation:Optional
	CustomPriority *string `json:"customPriority,omitempty" tf:"custom_priority,omitempty"`

	// Detailed description of the alert, anything that may not have fit in the message field.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The entity the alert is related to.
	// +kubebuilder:validation:Optional
	Entity *string `json:"entity,omitempty" tf:"entity,omitempty"`

	// Set of user defined properties specified as a map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtraProperties map[string]*string `json:"extraProperties,omitempty" tf:"extra_properties,omitempty"`

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// +kubebuilder:validation:Optional
	Filter []CreateFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreAlertActionsFromPayload *bool `json:"ignoreAlertActionsFromPayload,omitempty" tf:"ignore_alert_actions_from_payload,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreExtraPropertiesFromPayload *bool `json:"ignoreExtraPropertiesFromPayload,omitempty" tf:"ignore_extra_properties_from_payload,omitempty"`

	// If enabled, the integration will ignore responders sent in request payloads.
	// +kubebuilder:validation:Optional
	IgnoreRespondersFromPayload *bool `json:"ignoreRespondersFromPayload,omitempty" tf:"ignore_responders_from_payload,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreTagsFromPayload *bool `json:"ignoreTagsFromPayload,omitempty" tf:"ignore_tags_from_payload,omitempty"`

	// If enabled, the integration will ignore teams sent in request payloads.
	// +kubebuilder:validation:Optional
	IgnoreTeamsFromPayload *bool `json:"ignoreTeamsFromPayload,omitempty" tf:"ignore_teams_from_payload,omitempty"`

	// properties, recipients, teams, priority, eventType.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Name of the integration action.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Additional alert action note.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// Alert priority.
	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
	// +kubebuilder:validation:Optional
	Responders []RespondersParameters `json:"responders,omitempty" tf:"responders,omitempty"`

	// User defined field to specify source of action.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Comma separated list of labels to be attached to the alert.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Owner of the execution for integration action.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type FilterConditionsInitParameters struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type FilterConditionsObservation struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type FilterConditionsParameters struct {

	// +kubebuilder:validation:Optional
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type FilterInitParameters struct {
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FilterObservation struct {
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FilterParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IgnoreFilterConditionsInitParameters struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type IgnoreFilterConditionsObservation struct {
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type IgnoreFilterConditionsParameters struct {

	// +kubebuilder:validation:Optional
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type IgnoreFilterInitParameters struct {
	Conditions []IgnoreFilterConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IgnoreFilterObservation struct {
	Conditions []IgnoreFilterConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IgnoreFilterParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []IgnoreFilterConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IgnoreInitParameters struct {

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []IgnoreFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IgnoreObservation struct {

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	Filter []IgnoreFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IgnoreParameters struct {

	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// +kubebuilder:validation:Optional
	Filter []IgnoreFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Name of the integration action.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Integer value that defines in which order the action will be performed. Default: 1.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IntegrationActionInitParameters struct {
	Acknowledge []AcknowledgeInitParameters `json:"acknowledge,omitempty" tf:"acknowledge,omitempty"`

	// Additional alert action note.
	AddNote []AddNoteInitParameters `json:"addNote,omitempty" tf:"add_note,omitempty"`

	Close []CloseInitParameters `json:"close,omitempty" tf:"close,omitempty"`

	Create []CreateInitParameters `json:"create,omitempty" tf:"create,omitempty"`

	Ignore []IgnoreInitParameters `json:"ignore,omitempty" tf:"ignore,omitempty"`

	// ID of the parent integration resource to bind to.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/api/v1alpha1.Integration
	IntegrationID *string `json:"integrationId,omitempty" tf:"integration_id,omitempty"`

	// Reference to a Integration in api to populate integrationId.
	// +kubebuilder:validation:Optional
	IntegrationIDRef *v1.Reference `json:"integrationIdRef,omitempty" tf:"-"`

	// Selector for a Integration in api to populate integrationId.
	// +kubebuilder:validation:Optional
	IntegrationIDSelector *v1.Selector `json:"integrationIdSelector,omitempty" tf:"-"`
}

type IntegrationActionObservation struct {
	Acknowledge []AcknowledgeObservation `json:"acknowledge,omitempty" tf:"acknowledge,omitempty"`

	// Additional alert action note.
	AddNote []AddNoteObservation `json:"addNote,omitempty" tf:"add_note,omitempty"`

	Close []CloseObservation `json:"close,omitempty" tf:"close,omitempty"`

	Create []CreateObservation `json:"create,omitempty" tf:"create,omitempty"`

	// The id of the responder.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ignore []IgnoreObservation `json:"ignore,omitempty" tf:"ignore,omitempty"`

	// ID of the parent integration resource to bind to.
	IntegrationID *string `json:"integrationId,omitempty" tf:"integration_id,omitempty"`
}

type IntegrationActionParameters struct {

	// +kubebuilder:validation:Optional
	Acknowledge []AcknowledgeParameters `json:"acknowledge,omitempty" tf:"acknowledge,omitempty"`

	// Additional alert action note.
	// +kubebuilder:validation:Optional
	AddNote []AddNoteParameters `json:"addNote,omitempty" tf:"add_note,omitempty"`

	// +kubebuilder:validation:Optional
	Close []CloseParameters `json:"close,omitempty" tf:"close,omitempty"`

	// +kubebuilder:validation:Optional
	Create []CreateParameters `json:"create,omitempty" tf:"create,omitempty"`

	// +kubebuilder:validation:Optional
	Ignore []IgnoreParameters `json:"ignore,omitempty" tf:"ignore,omitempty"`

	// ID of the parent integration resource to bind to.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/api/v1alpha1.Integration
	// +kubebuilder:validation:Optional
	IntegrationID *string `json:"integrationId,omitempty" tf:"integration_id,omitempty"`

	// Reference to a Integration in api to populate integrationId.
	// +kubebuilder:validation:Optional
	IntegrationIDRef *v1.Reference `json:"integrationIdRef,omitempty" tf:"-"`

	// Selector for a Integration in api to populate integrationId.
	// +kubebuilder:validation:Optional
	IntegrationIDSelector *v1.Selector `json:"integrationIdSelector,omitempty" tf:"-"`
}

type RespondersInitParameters struct {

	// The id of the responder.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/team/v1alpha1.Team
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Team in team to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Team in team to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RespondersObservation struct {

	// The id of the responder.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The responder type - can be escalation, team or user.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RespondersParameters struct {

	// The id of the responder.
	// +crossplane:generate:reference:type=github.com/macpaw/provider-opsgenie/apis/team/v1alpha1.Team
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Team in team to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Team in team to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// The responder type - can be escalation, team or user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// IntegrationActionSpec defines the desired state of IntegrationAction
type IntegrationActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IntegrationActionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IntegrationActionInitParameters `json:"initProvider,omitempty"`
}

// IntegrationActionStatus defines the observed state of IntegrationAction.
type IntegrationActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IntegrationActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IntegrationAction is the Schema for the IntegrationActions API. Manages advanced actions for integrations within Opsgenie
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type IntegrationAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationActionSpec   `json:"spec"`
	Status            IntegrationActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationActionList contains a list of IntegrationActions
type IntegrationActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IntegrationAction `json:"items"`
}

// Repository type metadata.
var (
	IntegrationAction_Kind             = "IntegrationAction"
	IntegrationAction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IntegrationAction_Kind}.String()
	IntegrationAction_KindAPIVersion   = IntegrationAction_Kind + "." + CRDGroupVersion.String()
	IntegrationAction_GroupVersionKind = CRDGroupVersion.WithKind(IntegrationAction_Kind)
)

func init() {
	SchemeBuilder.Register(&IntegrationAction{}, &IntegrationActionList{})
}
